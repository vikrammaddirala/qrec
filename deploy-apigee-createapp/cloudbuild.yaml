steps:
  # Step 1: Retrieve Google Auth Token
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'get-auth-token'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # Get the auth token
        export build_token=\"$(gcloud auth print-access-token)\"
        echo "build_token=${build_token}" > /workspace/auth-token.txt

  # Step 2: Push the shared flow to UAT environment
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # Install apigeecli
        echo "Installing apigeecli"
        set -e
        OS="$(uname)"
        if [ "${OS}" = "Darwin" ] ; then
          OSEXT="Darwin"
        else
          OSEXT="Linux"
        fi

        APIGEECLI_VERSION="latest"
        LOCAL_ARCH=$(uname -m)
        case "${LOCAL_ARCH}" in
          x86_64|amd64)
            APIGEECLI_ARCH=x86_64
            ;;
          arm64|armv8*|aarch64*)
            APIGEECLI_ARCH=arm64
            ;;
          *)
            echo "This system's architecture, ${LOCAL_ARCH}, isn't supported"
            exit 1
            ;;
        esac

        tmp=$(mktemp -d /tmp/apigeecli.XXXXXX)
        NAME="apigeecli_${APIGEECLI_VERSION}"

        cd "$tmp" || exit
        URL="https://github.com/apigee/apigeecli/releases/download/${APIGEECLI_VERSION}/apigeecli_${APIGEECLI_VERSION}_${OSEXT}_${APIGEECLI_ARCH}.zip"

        echo "\nDownloading ${NAME} from ${URL} ...\n"
        if ! curl -o /dev/null -sIf "$URL"; then
          echo "\n${URL} is not found, please specify a valid APIGEECLI_VERSION and TARGET_ARCH\n"
          exit 1
        fi
        curl -fsLO "$URL"
        filename="apigeecli_${APIGEECLI_VERSION}_${OSEXT}_${APIGEECLI_ARCH}.zip"
        apt-get update && apt-get install -y unzip
        unzip "${filename}"
        rm "${filename}"
        
        cd "${tmp}/apigeecli_${APIGEECLI_VERSION}_${OSEXT}_${APIGEECLI_ARCH}" || exit
        chmod +x apigeecli
        mv apigeecli /usr/local/bin/apigeecli
        
        echo "apigeecli installation complete"

        # source substitution variables
        shared_flow_name="commonSF_devops__v1"
        target_env="uat"
        target_org="qrec-qa-apigee-nonprod"

        # Read the token from the previous step
        source /workspace/auth-token.txt

        # Deploy the shared flow to the UAT environment
        echo "Importing & deploying shared flow: ${shared_flow_name} to ${target_env} environment"
        apigeecli sharedflows create bundle --name ${shared_flow_name} --env ${target_env} --org ${target_org} --token ${build_token} -p "/workspace/shared_flows/${shared_flow_name}.zip" --wait --ovr
