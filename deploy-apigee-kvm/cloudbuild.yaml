steps:
  # Step 1: Retrieve Google Auth Token
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'get-auth-token'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # Get the auth token
        export build_token="$(gcloud auth print-access-token)"
        echo "build_token=${build_token}" > /workspace/auth-token.txt
        
  # Step 2: Export the specific KVM from the source environment
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # Define environment variables
        source_env="dev"
        target_env="dev-int"
        kvm_name="apigee-internal-01"
        org_name="qrec-qa-apigee-nonprod"
        output_dir="/workspace/kvm"
        
        mkdir -p ${output_dir}
        # Read the token from the previous step
        source /workspace/auth-token.txt
        # Export the specified KVM
        echo "Exporting KVM: ${kvm_name} from environment: ${source_env}"
        
        curl -H "Authorization: Bearer ${build_token}" https://apigee.googleapis.com/v1/organizations/${org_name}/environments/${source_env}/keyvaluemaps/${kvm_name}/entries -o ${output_dir}/${kvm_name}.json
        echo "curl -H "Authorization: Bearer ${build_token}" https://apigee.googleapis.com/v1/organizations/${org_name}/environments/${source_env}/keyvaluemaps/${kvm_name}/entries -o ${output_dir}/${kvm_name}.json"
           
  # Step 4: Deploy the KVM to the target environment
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # Define environment variables
        source_env="dev"
        target_env="dev-int"
        kvm_name="apigee-internal-01"
        org_name="qrec-qa-apigee-nonprod"
        
        echo "Installing apigeecli"
        curl -L https://github.com/apigee/apigeecli/releases/latest/download/apigeecli_linux_amd64.tar.gz -o apigeecli.tar.gz
        tar -zxvf apigeecli.tar.gz
        mv apigeecli /usr/local/bin
        
        # Read the token from the previous step
        source /workspace/auth-token.txt
        
        # Push & create KVM to the target environment
        echo "Importing & creating KVM: ${kvm_name} to environment: ${target_env}"

        # Delete existing KVM map in the target environment
        delete_output=$(apigeecli kvms delete -o ${org_name} -e ${target_env} -n ${kvm_name} -t ${build_token} 2>&1) || true
        echo "$delete_output"
        if echo "$delete_output" | grep -q '"code": 404'; then
          echo "KVM map not found (404 error), continuing with build"
        elif echo "$delete_output" | grep -q '"code":'; then
          echo "Failed to delete KVM map with error: $delete_output"
          exit 1
        fi
        
        # Create KVM map
        apigeecli kvms create -o ${org_name} -e ${target_env} -n ${kvm_name} -t ${build_token}

        # Import KVM entries
        apigeecli kvms entries import -o ${org_name} -e ${target_env} -f /workspace/kvm/${kvm_name}.json -m ${kvm_name} -t ${build_token}
